shiny::runApp('MyGit/8aa/run2')
shiny::runApp('MyGit/8aa/run2')
shiny::runApp('MyGit/8aa/run2')
View(data)
shiny::runApp('MyGit/8aa/run2')
shiny::runApp('MyGit/8aa/run2')
shiny::runApp('MyGit/8aa/run2')
shiny::runApp('MyGit/8aa/run2')
shiny::runApp('MyGit/8aa/run2')
shiny::runApp('MyGit/8aa/run2')
shiny::runApp('MyGit/8aa/run2')
shiny::runApp('MyGit/8aa/run2')
shiny::runApp('MyGit/8aa/run2')
shiny::runApp('MyGit/8aa/run2')
shiny::runApp('MyGit/8aa/run2')
shiny::runApp('MyGit/8aa/run2')
shiny::runApp('MyGit/8aa/run2')
shiny::runApp('MyGit/8aa/run2')
shiny::runApp('MyGit/8aa/run2')
shiny::runApp('MyGit/8aa/run2')
shiny::runApp('MyGit/8aa/run2')
shiny::runApp('MyGit/8aa/run2')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
shinyapps::deployApp('path/to/your/app')
shinyapps::setAccountInfo(name='amirhs', token='EF101805397D89F6C8BE7D87CDACD580', secret='9P5RL4pRr93ch/s7dqsKcwwQfVs6LSWR95umRs5o')
library(shinyapps)
shinyapps::deployApp('path/to/your/app')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
data <- read.csv("~/MyGit/8aa/TFIDF.csv", header = TRUE)
shiny::runApp('MyGit/8aa/run1')
x <- colnames(data)
x
x <- colnames(data)[2:4]
x
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
runGitHub( "<ShinyApps>", "<Amirosimani>")
git config --global user.email "amirhs.imani@gmail.com"
shiny::runApp('MyGit/8aa/run1')
git remote add origin git@github.com:Amirosimani/ShinyApp.git
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
c_min <- min(data[,input$selection])
c_max <- max(data[,input$selection])
updateSliderInput(session, "range",
min = c_min, max = c_max)
git remote add origin git@github.com:Amirosimani/ShinyApp.git
c_min <- min(data[,input$selection])
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
hist( data[,input$selection], breaks = bins, col = 'darkgray', border = 'white')
c_min <- min(data[,input$selection])
hist( data[,input$selection],  col = 'darkgray', border = 'white')
hist( data[,2],  col = 'darkgray', border = 'white')
hist( data[,3],  col = 'darkgray', border = 'white')
hist( data[,2],  breaks = (max(data[,2])-min(data[,2]))/100 , col = 'darkgray', border = 'white')
hist( data[,3],  breaks = (max(data[,3])-min(data[,3]))/100 , col = 'darkgray', border = 'white')
hist( data[,3],  breaks = 1/(max(data[,3])-min(data[,3])) , col = 'darkgray', border = 'white')
hist( data[,3],  breaks = 1 / (max(data[,3])-min(data[,3])) , col = 'darkgray', border = 'white')
hist( data[,3],  breaks = c(1 / (max(data[,3])-min(data[,3]))) , col = 'darkgray', border = 'white')
hist( data[,3],  breaks = (max(data[,3])-min(data[,3])) , col = 'darkgray', border = 'white')
hist( data[,3],  breaks = (max(data[,3])-min(data[,3])) , col = 'darkgray', border = 'white')
hist( data[,2],  breaks = (max(data[,2])-min(data[,2])) , col = 'darkgray', border = 'white')
hist( data[,2],  breaks = (max(data[,2])-min(data[,2])) , col = 'darkgray', border = 'white')
hist( data[,4],  breaks = (max(data[,4])-min(data[,4])) , col = 'darkgray', border = 'white')
hist( data[,2],  breaks = (max(data[,2])-min(data[,2])) , col = 'darkgray', border = 'white')
hist( data[,4],  breaks = (max(data[,4])-min(data[,4])) , col = 'darkgray', border = 'white')
hist( data[,4],  breaks = (max(data[,4])-min(data[,4])) , col = 'darkgray', border = 'white', main = "Words' Histogram")
hist( data[,4],  breaks = (max(data[,4])-min(data[,4])) , col = 'darkgray', border = 'white', main = "Words Histogram")
hist( data[,4],  breaks = (max(data[,4])-min(data[,4])) , col = 'darkgray', border = 'white', main = "Words Histogram", xlim=c(0,300))
hist( data[,3],  breaks = (max(data[,3])-min(data[,3])) , col = 'darkgray', border = 'white', main = "Words Histogram", xlim=c(0,300))
hist( data[,2],  breaks = (max(data[,2])-min(data[,2])) , col = 'darkgray', border = 'white', main = "Words Histogram", xlim=c(0,300))
hist( data[,2],  breaks = (max(data[,2])-min(data[,2])) , col = 'darkgray', border = 'white', main = "Words Histogram", xlim=c(0,300), xlab=colnames(data)[2])
hist( data[,2],  breaks = (max(data[,2])-min(data[,2])) , col = 'darkgray', border = 'white', main = "Words Histogram", xlim=c(0,300), xlab=colnames(data)[2], ylab = "word numbers")
hist( data[,2],  breaks = (max(data[,2])-min(data[,2])) , col = 'darkgray', border = 'white', main = "Words Histogram", xlim=c(0,300), xlab=colnames(data)[3], ylab = "word numbers")
hist( data[,2],  breaks = (max(data[,2])-min(data[,2])) , col = 'darkgray', border = 'white', main = "Words Histogram", xlim=c(0,300), xlab=colnames(data)[2], ylab = "word numbers")
hist( data[,2],  breaks = (max(data[,2])-min(data[,2])) , col = 'darkgray', border = 'white', main = "Words Histogram", xlim=c(0,150), xlab=colnames(data)[2], ylab = "word numbers")
shiny::runApp('MyGit/8aa/run1')
hist( data[,2],  breaks = (max(data[,2])-min(data[,2])) , col = 'darkgray', border = 'white', main = "Histogram", xlim=c(0,150), xlab=colnames(data)[2], ylab = "word numbers")
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
label <- data[,input$selection]
label <- colnames(data[,input$selection])
label <- colnames(data)[,input$selection]
shiny::runApp('MyGit/8aa/run1')
curve(dnorm(x, mean=mean(data[,2]), sd=sd(data[,2])), add=TRUE, col=”darkblue”, lwd=2)
curve(dnorm(x, mean=mean(data[,2]), sd=sd(data[,2])), add=TRUE, col=”darkblue”, lwd=2
hist( data[,2],  breaks = (max(data[,2])-min(data[,2])) , col = 'darkgray', border = 'white', main = "Histogram", xlim=c(0,150), xlab=colnames(data)[2], ylab = "word numbers")
curve(dnorm(x, mean=mean(data[,2]), sd=sd(data[,2])), add=TRUE, col=”darkblue”, lwd=2)
x <- data[,2]
curve(dnorm(x, mean=mean(x), sd=sd(x)), add=TRUE, col=”darkblue”, lwd=2)
mean(x)
sd(x)
curve(dnorm(x, mean=mean(x), sd=sd(x)), add=TRUE, col="darkblue", lwd=2)
curve(dnorm(x, mean=mean(data[,2]), sd=sd(data[,2])), add=TRUE, col="darkblue", lwd=2)
curve(dnorm(x, mean=mean(data[,3]), sd=sd(data[,3])), add=TRUE, col="darkblue", lwd=2)
hist( data[,3],  breaks = (max(data[,3])-min(data[,3])) , col = 'darkgray', border = 'white', main = "Words Histogram", xlim=c(0,300))
curve(dnorm(x, mean=mean(data[,3]), sd=sd(data[,3])), add=TRUE, col="darkblue", lwd=2)
lines(density(X))
lines(density(data[,3]))
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
renderTable
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
shiny::runApp('MyGit/8aa/run1')
## example 10.2.1
##sign test
##install package PASWR
install.package("PASWR")
library(PASWR)
data1=c(55, 58, 61, 61, 62, 62, 62, 63, 63, 64, 66, 68, 68, 69, 69, 69, 70, 71, 72, 72)
SIGN.test(data1,md=59, y = NULL, alternative = "two.sided", conf.level = 0.95)
## example 10.3.1
## sign rank test
## two sample
library(MASS)
install.packages("PASWR")
library(PASWR)
data1=c(55, 58, 61, 61, 62, 62, 62, 63, 63, 64, 66, 68, 68, 69, 69, 69, 70, 71, 72, 72)
SIGN.test(data1,md=59, y = NULL, alternative = "two.sided", conf.level = 0.95)
## example 10.3.1
## sign rank test
## two sample
library(MASS)
y1=rnorm(100,1,1)
y2=rnorm(100,0,1)
wilcox.test(y1, y2)
# Chapter 3 Lab: Linear Regression
library(MASS)
library(ISLR)
# Simple Linear Regression
names(Boston)
lm.fit=lm(medv~lstat,data=Boston)
attach(Boston)
##fit a simple linear regression
lm.fit=lm(medv~lstat)
lm.fit
summary(lm.fit)
names(lm.fit)
## extracting coefficients
coef(lm.fit)
##confidence intervals for the coefficients
confint(lm.fit)
## predictions along with conf and predictive intervals for new data
predict(lm.fit,data.frame(lstat=(c(5,10,15))), interval="confidence")
predict(lm.fit,data.frame(lstat=(c(5,10,15))), interval="prediction")
## plotting our regression fit
plot(lstat,medv)
abline(lm.fit)
abline(lm.fit,lwd=3)
abline(lm.fit,lwd=3,col="red")
plot(lstat,medv,col="red")
plot(lstat,medv,pch=20)
plot(lstat,medv,pch="+")
plot(1:20,1:20,pch=1:20)
## 4 plots on 1 page
par(mfrow=c(2,2))
## diagnostic plots
plot(lm.fit)
plot(predict(lm.fit), residuals(lm.fit))
plot(predict(lm.fit), rstudent(lm.fit))
plot(hatvalues(lm.fit))
which.max(hatvalues(lm.fit))
# Multiple Linear Regression
plot(predict(lm.fit), residuals(lm.fit))
plot(predict(lm.fit), rstudent(lm.fit))
plot(hatvalues(lm.fit))
which.max(hatvalues(lm.fit))
## diagnostic plots
plot(lm.fit)
plot(predict(lm.fit), residuals(lm.fit))
plot(predict(lm.fit), rstudent(lm.fit))
plot(hatvalues(lm.fit))
which.max(hatvalues(lm.fit))
plot(hatvalues(lm.fit))
which.max(hatvalues(lm.fit))
plot(hatvalues(lm.fit))
plot(hatvalues(lm.fit))
## diagnostic plots
plot(lm.fit)
plot(predict(lm.fit), residuals(lm.fit))
plot(predict(lm.fit), rstudent(lm.fit))
plot(hatvalues(lm.fit))
which.max(hatvalues(lm.fit))
par(mfrow=c(2,2))
## diagnostic plots
plot(lm.fit)
plot(predict(lm.fit), residuals(lm.fit))
plot(predict(lm.fit), rstudent(lm.fit))
plot(hatvalues(lm.fit))
which.max(hatvalues(lm.fit))
# Multiple Linear Regression
plot(hatvalues(lm.fit))
which.max(hatvalues(lm.fit))
which.max(hatvalues(lm.fit))
plot(hatvalues(lm.fit))
which.max(hatvalues(lm.fit))
# Multiple Linear Regression
lm.fit=lm(medv~lstat+age,data=Boston)
summary(lm.fit)
## regress on all variables in the data set
lm.fit=lm(medv~.,data=Boston)
summary(lm.fit)
library(car)
## compute the variance inflation factor as a measure of multicollinearity
vif(lm.fit)
lm.fit1=lm(medv~.-age,data=Boston)
summary(lm.fit1)
lm.fit1=update(lm.fit, ~.-age)
# Interaction Terms
summary(lm(medv~lstat*age,data=Boston))
# Non-linear Transformations of the Predictors
plot(hatvalues(lm.fit))
which.max(hatvalues(lm.fit))
lm.fit=lm(medv~lstat+age,data=Boston)
summary(lm.fit)
## regress on all variables in the data set
lm.fit=lm(medv~.,data=Boston)
summary(lm.fit)
library(car)
## compute the variance inflation factor as a measure of multicollinearity
library(car)
install.packages("car")
libray(car)
library(car)
library(car)
## compute the variance inflation factor as a measure of multicollinearity
vif(lm.fit)
lm.fit1=lm(medv~.-age,data=Boston)
summary(lm.fit1)
lm.fit1=update(lm.fit, ~.-age)
# Interaction Terms
summary(lm(medv~lstat*age,data=Boston))
# Non-linear Transformations of the Predictors
lm.fit2=lm(medv~lstat+I(lstat^2))
summary(lm.fit2)
lm.fit=lm(medv~lstat)
## comparing the polynomial to the linear fit
anova(lm.fit,lm.fit2)
par(mfrow=c(2,2))
plot(lm.fit2)
## fitting a fifth degree ploynomial model
lm.fit5=lm(medv~poly(lstat,5))
summary(lm.fit5)
summary(lm(medv~log(rm),data=Boston))
# Qualitative Predictors
fix(Carseats)
names(Carseats)
lm.fit=lm(Sales~.+Income:Advertising+Price:Age,data=Carseats)
summary(lm.fit)
attach(Carseats)
contrasts(ShelveLoc)
sudo apt-get install git-core
library(dplyr)
library(dplyr)
library(RSQLite)
install.packages("DBI")
getwd()
library(RSQLite)
install.packages("RSQLite")
View(female)
View(lawf)
View(lawf)
library(dplyr)
library(RSQLite)
#Set up connection to the SQLite database
connection <- dbConnect(RSQLite::SQLite(), dbname = "clinton.sqlite")
#Print all tables
print("Tables")
all_tables <-  dbListTables(connection)
print(all_tables)
library(stats)
library(dplyr)
library(RSQLite)
library(lubridate)
library(ggplot2)
#Set up connection to the SQLite database
connection <- dbConnect(RSQLite::SQLite(), dbname = "clinton.sqlite")
#Print all tables
print("Tables")
all_tables <-  dbListTables(connection)
print(all_tables)
#Print information about 'docs' table
docs <- dbGetQuery(connection, sprintf("SELECT * FROM %s", "docs"))
print("Column Name")
print(colnames(docs))
print(sprintf("Number of Rows: %d", nrow(docs)))
#parsing date
for (i in 1:nrow(docs)) {
arrive <- ymd_hms(docs$date, tz = "Pacific/Auckland")
time <- hour(arrive)
time <-time[complete.cases(time)]
date <- as.Date(as.POSIXct(strptime(docs$date, "%Y-%m-%d %H:%M:%S")))
date[complete.cases(date)]
date <-date[complete.cases(date)]
stripped_date = data.frame(date, time)
}
#Clean up connection to the database
dbDisconnect(connection)
library(dplyr)
library(RSQLite)
library(stats)
library(dplyr)
library(DBI)
library(RSQLite)
library(lubridate)
library(ggplot2)
#Set up connection to the SQLite database
connection <- dbConnect(RSQLite::SQLite(), dbname = "clinton.sqlite")
#Print all tables
print("Tables")
all_tables <-  dbListTables(connection)
print(all_tables)
#Print information about 'docs' table
docs <- dbGetQuery(connection, sprintf("SELECT * FROM %s", "docs"))
print("Column Name")
print(colnames(docs))
print(sprintf("Number of Rows: %d", nrow(docs)))
#parsing date
arrive <- ymd_hms(docs$date, tz = "Pacific/Auckland")
time <- hour(arrive)
time <-time[complete.cases(time)]
date <- as.Date(as.POSIXct(strptime(docs$date, "%Y-%m-%d %H:%M:%S")))
date <-date[complete.cases(date)]
stripped_date = data.frame(date, time)
sorted_data <- stripped_date[order(date),]
year2009 <- subset(sorted_data, format(date,'%Y') %in% c('2009','2010'))
year2010 <- subset(sorted_data, format(date,'%Y') %in% c('2010','2011'))
year2011 <- subset(sorted_data, format(date,'%Y') %in% c('2011','2012'))
year2012 <- subset(sorted_data, format(date,'%Y') %in% c('2012','2013'))
par(mfrow=c(2,2))
hist(year2009$time, breaks = 24, freq = T, main = paste("2009"), xlim = c(0,24),ylim = c(0,2000))
hist(year2010$time, breaks = 24, freq = T, main = paste("2010"), xlim = c(0,24),ylim = c(0,2000))
hist(year2011$time, breaks = 24, freq = T, main = paste("2011"), xlim = c(0,24),ylim = c(0,2000))
hist(year2012$time, breaks = 24, freq = T, main = paste("2012"), xlim = c(0,24), ylim = c(0,2000))
#qplot(stripped_date$time, geom="histogram")
#Clean up connection to the database
dbDisconnect(connection)
setwd("~/GitHub/MWH")
connection <- dbConnect(RSQLite::SQLite(), dbname = "clinton.sqlite")
#Print all tables
print("Tables")
all_tables <-  dbListTables(connection)
print(all_tables)
#Print information about 'docs' table
docs <- dbGetQuery(connection, sprintf("SELECT * FROM %s", "docs"))
print("Column Name")
print(colnames(docs))
print(sprintf("Number of Rows: %d", nrow(docs)))
#parsing date
arrive <- ymd_hms(docs$date, tz = "Pacific/Auckland")
time <- hour(arrive)
date <- as.Date(as.POSIXct(strptime(docs$date, "%Y-%m-%d %H:%M:%S")))
stripped_date = data.frame(date, time)
date <-date[complete.cases(date)]
time <-time[complete.cases(time)]
sorted_data <- stripped_date[order(date),]
year2010 <- subset(sorted_data, format(date,'%Y') %in% c('2010','2011'))
year2009 <- subset(sorted_data, format(date,'%Y') %in% c('2009','2010'))
par(mfrow=c(2,2))
year2011 <- subset(sorted_data, format(date,'%Y') %in% c('2011','2012'))
year2012 <- subset(sorted_data, format(date,'%Y') %in% c('2012','2013'))
hist(year2011$time, breaks = 24, freq = T, main = paste("2011"), xlim = c(0,24),ylim = c(0,2000))
#qplot(stripped_date$time, geom="histogram")
#Clean up connection to the database
hist(year2010$time, breaks = 24, freq = T, main = paste("2010"), xlim = c(0,24),ylim = c(0,2000))
hist(year2009$time, breaks = 24, freq = T, main = paste("2009"), xlim = c(0,24),ylim = c(0,2000))
hist(year2012$time, breaks = 24, freq = T, main = paste("2012"), xlim = c(0,24), ylim = c(0,2000))
dbDisconnect(connection)
library(tm)
library(nlp)
library(NLP)
library(tm)
??NLP
View(docs)
stripped_date = data.frame(date, time, subject)
stripped_date = data.frame(date, time, docs$subject)
time <- hour(arrive)
date <- as.Date(as.POSIXct(strptime(docs$date, "%Y-%m-%d %H:%M:%S")))
stripped_date = data.frame(date, time, docs$subject)
View(stripped_date)
stripped_date = data.frame(date, time, docs$body)
View(stripped_date)
View(docs)
stripped_date$body[1]
stripped_date$body[2]
stripped_date$body[3]
stripped_date$body(1)
stripped_date$body[3]
stripped_date[3]
View(docs)
library(Shiny)
library(shiny)
library(shiny)
library(networkD3)
install.packages("networkD3")
library(stats)
library(dplyr)
