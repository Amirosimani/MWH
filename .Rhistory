library("geocode")
install.packages("geocodeHERE")
library("geocodeHERE")
library("ggmap")
library(maptools)
install.packages("maptools")
library(maptools)
library(dismo)
library(maps)
p1 <- ggplot(worldMap)
p2 <- p1 + geom_path(aes(x = long, y = lat, group = group),
colour = gray(2/3), lwd = 1/3)
p3 <- p2 + geom_point(data = locations,
aes(x = lon, y = lat),
colour = "RED", alpha = 1/2, size = 1)
print(p3)
consumerKey = "TnhFkCkWw5XiRjaaU6MVFJXrb"   # from your app name
consumerSecret = "8T2gfZ7hpCRAYcBQbkfURnyT3ylaHEa8BsO2akLz6gll6kN2OM"
accessToken = "377053028-LZYBzp2rcwn3sG103AVVdUvWHYrOBHLhNPP2wq5S"
accessSecret = "eFD67fq59GaltQj45I5F5eT8wEEdlCxEG3bRE3qod8ZVo"
setup_twitter_oauth(consumer_key = consumerKey, consumer_secret = consumerSecret,
access_token = accessToken, access_secret = accessSecret)
searchTerm <- "opcw"
searchResults <- searchTwitter(searchTerm, n = 1000)
tweetFrame <- twListToDF(searchResults)
library(stats)
library(base)
library(xml2)
library(rvest)
library(dplyr)
library(stats)
library(base)
library(xml2)
library(rvest)
library(dplyr)
library(sp)
library(raster)
library(twitteR)
library(lubridate)
library(RJSONIO)
library(ggplot2)
library(dismo)
library(maps)
library("geocodeHERE")
library("ggmap")
library(maptools)
setwd("~/GitHub/MWH")
library(stats)
library(dplyr)
library(DBI)
library(RSQLite)
library(lubridate)
library(NLP)
library(tm)
library(SnowballC)
connection <- dbConnect(RSQLite::SQLite(), dbname = "clinton.sqlite")
all_tables <-  dbListTables(connection)
docs <- dbGetQuery(connection, sprintf("SELECT * FROM %s", "docs"))
keeps <- c("date","body")
DF <- docs[keeps]
DF <- mutate_each(DF, funs(tolower))
data.frame(lapply(DF, function (x){
arrive <- ymd_hms(x$date, tz = "Pacific/Auckland")
time <- hour(arrive)
#time <-time[complete.cases(time)]
date <- as.Date(as.POSIXct(strptime(x$date, "%Y-%m-%d %H:%M:%S")))
#date <-date[complete.cases(date)]
stripped_date = data.frame(date, time, x$body)
x <- stripped_date[order(date),]
}))
DF <- stripped_date[order(date),]
data.frame(lapply(DF, function (x){
arrive <- ymd_hms(x$date, tz = "Pacific/Auckland")
time <- hour(arrive)
#time <-time[complete.cases(time)]
date <- as.Date(as.POSIXct(strptime(x$date, "%Y-%m-%d %H:%M:%S")))
#date <-date[complete.cases(date)]
stripped_date = data.frame(date, time, x$body)
DF <- stripped_date[order(date),]
}))
keyword <- readline(prompt = "Enter a keyword:   ")
keyword <- tolower(keyword)
user.query <- filter(docs, grepl(keyword, DF$body))
View(DF)
parsing.dates <- function (DF){
arrive <- ymd_hms(DF$date, tz = "Pacific/Auckland")
time <- hour(arrive)
#time <-time[complete.cases(time)]
date <- as.Date(as.POSIXct(strptime(df$date, "%Y-%m-%d %H:%M:%S")))
#date <-date[complete.cases(date)]
stripped_date = data.frame(date, time, x$body)
DF <- stripped_date[order(date),]
}
parsing.dates(DF)
arrive <- ymd_hms(DF$date, tz = "Pacific/Auckland")
time <- hour(arrive)
#time <-time[complete.cases(time)]
date <- as.Date(as.POSIXct(strptime(df$date, "%Y-%m-%d %H:%M:%S")))
date <- as.Date(as.POSIXct(strptime(DF$date, "%Y-%m-%d %H:%M:%S")))
stripped_date = data.frame(date, time, x$body)
stripped_date = data.frame(date, time, DF$body)
parsing.date <- function(x) {arrive <- ymd_hms(DF$date, tz = "Pacific/Auckland")
time <- hour(arrive)
#time <-time[complete.cases(time)]
date <- as.Date(as.POSIXct(strptime(DF$date, "%Y-%m-%d %H:%M:%S")))
#date <-date[complete.cases(date)]
stripped_date = data.frame(date, time, DF$body)
DF <- stripped_date[order(date),]
}
parsing.dates(DF)
library(stats)
library(dplyr)
library(DBI)
library(RSQLite)
library(lubridate)
library(NLP)
library(tm)
library(SnowballC)
connection <- dbConnect(RSQLite::SQLite(), dbname = "clinton.sqlite")
all_tables <-  dbListTables(connection)
docs <- dbGetQuery(connection, sprintf("SELECT * FROM %s", "docs"))
keeps <- c("date","body")
DF <- docs[keeps]
DF <- mutate_each(DF, funs(tolower))
data.frame(lapply(DF, function (x){
arrive <- ymd_hms(x$date, tz = "Pacific/Auckland")
time <- hour(arrive)
#time <-time[complete.cases(time)]
date <- as.Date(as.POSIXct(strptime(x$date, "%Y-%m-%d %H:%M:%S")))
#date <-date[complete.cases(date)]
stripped_date = data.frame(date, time, x$body)
DF <- stripped_date[order(date),]
}))
parsing.date <- function(x) {
arrive <- ymd_hms(DF$date, tz = "Pacific/Auckland")
time <- hour(arrive)
#time <-time[complete.cases(time)]
date <- as.Date(as.POSIXct(strptime(DF$date, "%Y-%m-%d %H:%M:%S")))
#date <-date[complete.cases(date)]
stripped_date = data.frame(date, time, DF$body)
DF <- stripped_date[order(date),]
}
parsing.dates(DF)
parsing.date(DF)
View(DF)
data.frame(lapply(DF, function(x) {
arrive <- ymd_hms(DF$date, tz = "Pacific/Auckland")
time <- hour(arrive)
#time <-time[complete.cases(time)]
date <- as.Date(as.POSIXct(strptime(DF$date, "%Y-%m-%d %H:%M:%S")))
#date <-date[complete.cases(date)]
stripped_date = data.frame(date, time, DF$body)
DF <- stripped_date[order(date),]
}))
data.frame(lapply(DF, function(DF) {
arrive <- ymd_hms(DF$date, tz = "Pacific/Auckland")
time <- hour(arrive)
#time <-time[complete.cases(time)]
date <- as.Date(as.POSIXct(strptime(DF$date, "%Y-%m-%d %H:%M:%S")))
#date <-date[complete.cases(date)]
stripped_date = data.frame(date, time, DF$body)
DF <- stripped_date[order(date),]
}))
data.frame(lapply(DF, function(x) {
arrive <- ymd_hms(x$date, tz = "Pacific/Auckland")
time <- hour(arrive)
#time <-time[complete.cases(time)]
date <- as.Date(as.POSIXct(strptime(x$date, "%Y-%m-%d %H:%M:%S")))
#date <-date[complete.cases(date)]
stripped_date = data.frame(date, time, x$body)
DF <- stripped_date[order(date),]
}))
keyword <- readline(prompt = "Enter a keyword:   ")
keyword <- tolower(keyword)
keyword <- readline(prompt = "Enter a keyword:   ")
keyword <- tolower(keyword)
user.query <- filter(docs, grepl(keyword, DF$body))
View(user.query)
user.query <- filter(DF, grepl(keyword, DF$body))
paring.date(user.query)
parsing.date(user.query)
txt = NULL
clean.up <- function(x) {
for (i in 1:nrow(user.query)) {
txt <- rbind(txt, regmatches(user.query$body[i], regexpr("(nSubject:).*(\\n)?", user.query$body[i]), invert = F))
txt <- gsub("(\\\\n)", " ", txt)
txt <- gsub("(\\Re:)", " ", txt)
txt <- gsub("(nSubject:)", " ", txt)
}}
clean.up(user.query)
View(user.query)
user.quey[1]
user.query[1]
user.query(1)
user.query$body(1)
user.query$body[1]
for (i in 1:nrow(user.query)) {
txt <- rbind(txt, regmatches(user.query$body[i], regexpr("(nSubject:).*(\\n)?", user.query$body[i]), invert = F))
txt <- gsub("(\\\\n)", " ", txt)
txt <- gsub("(\\Re:)", " ", txt)
txt <- gsub("(nSubject:)", " ", txt)
}}
for (i in 1:nrow(user.query)) {
txt <- rbind(txt, regmatches(user.query$body[i], regexpr("(nSubject:).*(\\n)?", user.query$body[i]), invert = F))
txt <- gsub("(\\\\n)", " ", txt)
txt <- gsub("(\\Re:)", " ", txt)
txt <- gsub("(nSubject:)", " ", txt)
}
View(txt)
user.query <- filter(DF, grepl(keyword, DF$body))
for (i in 1:nrow(user.query)) {
txt <- rbind(txt, regmatches(user.query$body[i], regexpr("(nSubject:).*(\\n)?", user.query$body[i]), invert = F))
txt <- gsub("(\\\\n)", " ", txt)
txt <- gsub("(\\Re:)", " ", txt)
txt <- gsub("(nSubject:)", " ", txt)
}
View(txt)
user.query$body[1]
txt = NULL
for (i in 1:nrow(user.query)) {
txt <- rbind(txt, regmatches(user.query$body[i], regexpr("(nSubject:).*(\\n)?", user.query$body[i]), invert = F))
txt <- gsub("(\\\\n)", " ", txt)
txt <- gsub("(\\Re:)", " ", txt)
txt <- gsub("(nSubject:)", " ", txt)
}
View(txt)
txt = NULL
for (i in 1:nrow(user.query)) {
txt <- rbind(txt, regmatches(user.query$body[i], regexpr("(nSubject:).*(\\n)?", user.query$body[i]), invert = F))
txt <- gsub("(\\\\n)", " ", txt)
txt <- gsub("(\\Re:)", " ", txt)
txt <- gsub("(nSubject:)", " ", txt)
}
View(txt)
library(stats)
library(dplyr)
library(DBI)
library(RSQLite)
library(lubridate)
library(NLP)
library(tm)
library(SnowballC)
connection <- dbConnect(RSQLite::SQLite(), dbname = "clinton.sqlite")
all_tables <-  dbListTables(connection)
docs <- dbGetQuery(connection, sprintf("SELECT * FROM %s", "docs"))
keeps <- c("date","body")
DF <- docs[keeps]
DF <- mutate_each(DF, funs(tolower))
keyword <- readline(prompt = "Enter a keyword:   ")
keyword <- tolower(keyword)
user.query <- filter(DF, grepl(keyword, DF$body))
txt = NULL
for (i in 1:nrow(user.query)) {
txt <- rbind(txt, regmatches(user.query$body[i], regexpr("(nSubject:).*(\\n)?", user.query$body[i]), invert = F))
txt <- gsub("(\\\\n)", " ", txt)
txt <- gsub("(\\Re:)", " ", txt)
txt <- gsub("(nSubject:)", " ", txt)
}
txt <- rbind(txt, regmatches(user.query$body[1], regexpr("(nSubject:).*(\\n)?", user.query$body[1]), invert = F))
View(txt)
txt <- rbind(DF, regmatches(user.query$body[1], regexpr("(nSubject:).*(\\n)?", user.query$body[1]), invert = F))
View(txt)
txt <- rbind(, regmatches(user.query$body[1], regexpr("(nSubject:).*(\\n)?", user.query$body[1]), invert = F))
txt <- rbind(txt, regmatches(user.query$body[1], regexpr("(nSubject:).*(\\n)?", user.query$body[1]), invert = F))
txt <- rbind(txt, regmatches(user.query$body[1], regexpr("(nSubject:).*(\\n)?", user.query$body[1]), invert = F))
txt = NULL
txt <- rbind(txt, regmatches(user.query$body[1], regexpr("(nSubject:).*(\\n)?", user.query$body[1]), invert = F))
txt <- rbind(txt, regmatches(user.query$body[2], regexpr("(nSubject:).*(\\n)?", user.query$body[2]), invert = F))
View(txt)
print(DF$body[1])
print(DF$body[10])
txt = NULL
for (i in 1:nrow(user.query)) {
txt <- rbind(txt, regmatches(user.query$body[i], regexpr("(nsubject:).*(\\n)?", user.query$body[i]), invert = F))
txt <- gsub("(\\\\n)", " ", txt)
txt <- gsub("(\\Re:)", " ", txt)
txt <- gsub("(nSubject:)", " ", txt)
}
keyword <- readline(prompt = "Enter a keyword:   ")
keyword <- tolower(keyword)
txt = NULL
for (i in 1:nrow(user.query)) {
user.query <- filter(DF, grepl(keyword, DF$body))
txt = NULL
for (i in 1:nrow(user.query)) {
txt <- rbind(txt, regmatches(user.query$body[i], regexpr("(nsubject:).*(\\n)?", user.query$body[i]), invert = F))
txt <- gsub("(\\\\n)", " ", txt)
txt <- gsub("(\\Re:)", " ", txt)
txt <- gsub("(nSubject:)", " ", txt)
}
View(txt)
txt = NULL
clean.up <- function(x){
for (i in 1:nrow(user.query)) {
txt <- rbind(txt, regmatches(user.query$body[i], regexpr("(nsubject:).*(\\n)?", user.query$body[i]), invert = F))
txt <- gsub("(\\\\n)", " ", txt)
txt <- gsub("(\\Re:)", " ", txt)
txt <- gsub("(nsubject:)", " ", txt)
}}
clean.up(user.query)
View(user.query)
clean.up <- function(x, DF){
for (i in 1:nrow(user.query)) {
txt <- rbind(txt, regmatches(user.query$body[i], regexpr("(nsubject:).*(\\n)?", user.query$body[i]), invert = F))
txt <- gsub("(\\\\n)", " ", txt)
txt <- gsub("(\\Re:)", " ", txt)
txt <- gsub("(nsubject:)", " ", txt)
assign('txt',txt,envir=.GlobalEnv)
}}
clean.up(user.query)
View(txt)
parsing.date <- function(x, DF) {
arrive <- ymd_hms(x$date, tz = "Pacific/Auckland")
time <- hour(arrive)
#time <-time[complete.cases(time)]
date <- as.Date(as.POSIXct(strptime(x$date, "%Y-%m-%d %H:%M:%S")))
#date <-date[complete.cases(date)]
stripped_date = data.frame(date, time, x$body)
DF <- stripped_date[order(date),]
assign('DF',DF,envir=.GlobalEnv)
}))
parsing.date <- function(x, DF) {
arrive <- ymd_hms(x$date, tz = "Pacific/Auckland")
time <- hour(arrive)
#time <-time[complete.cases(time)]
date <- as.Date(as.POSIXct(strptime(x$date, "%Y-%m-%d %H:%M:%S")))
#date <-date[complete.cases(date)]
stripped_date = data.frame(date, time, x$body)
DF <- stripped_date[order(date),]
assign('DF',DF,envir=.GlobalEnv)
}
parsing.date(DF)
View(DF)
keyword <- readline(prompt = "Enter a keyword:   ")
keyword <- tolower(keyword)
user.query <- filter(DF, grepl(keyword, DF$body))
View(DF)
parsing.date <- function(x) {
arrive <- ymd_hms(x$date, tz = "Pacific/Auckland")
time <- hour(arrive)
#time <-time[complete.cases(time)]
date <- as.Date(as.POSIXct(strptime(x$date, "%Y-%m-%d %H:%M:%S")))
#date <-date[complete.cases(date)]
stripped_date = data.frame(date, time, x$body)
DF <- stripped_date[order(date),]
assign('DF',DF,envir=.GlobalEnv)
}
parsing.date(DF)
user.query <- filter(DF, grepl(keyword, DF$x.body))
View(user.query)
library(stats)
library(dplyr)
library(DBI)
library(RSQLite)
library(lubridate)
library(NLP)
library(tm)
library(SnowballC)
connection <- dbConnect(RSQLite::SQLite(), dbname = "clinton.sqlite")
all_tables <-  dbListTables(connection)
docs <- dbGetQuery(connection, sprintf("SELECT * FROM %s", "docs"))
keeps <- c("date","body")
DF <- docs[keeps]
DF <- mutate_each(DF, funs(tolower))
keyword <- readline(prompt = "Enter a keyword:   ")
keyword <- tolower(keyword)
user.query <- filter(DF, grepl(keyword, DF$body))
View(user.query)
txt = NULL
clean.up <- function(x, DF){
for (i in 1:nrow(user.query)) {
txt <- rbind(txt, regmatches(user.query$body[i], regexpr("(nsubject:).*(\\n)?", user.query$body[i]), invert = F))
txt <- gsub("(\\\\n)", " ", txt)
txt <- gsub("(\\Re:)", " ", txt)
txt <- gsub("(nsubject:)", " ", txt)
assign('txt',txt,envir=.GlobalEnv)
}}
clean.up(user.query)
View(user.query)
keyword <- readline(prompt = "Enter a keyword:   ")
keyword <- tolower(keyword)
View(DF)
user.query <- filter(DF, grepl(keyword, DF$body))
txt = NULL
clean.up <- function(x, DF){
for (i in 1:nrow(user.query)) {
txt <- rbind(txt, regmatches(user.query$body[i], regexpr("(nsubject:).*(\\n)?", user.query$body[i]), invert = F))
txt <- gsub("(\\\\n)", " ", txt)
txt <- gsub("(\\Re:)", " ", txt)
txt <- gsub("(nsubject:)", " ", txt)
assign('txt',txt,envir=.GlobalEnv)
}}
clean.up(user.query)
View(txt)
clean.up <- function(x, DF){
for (i in 1:nrow(user.query)) {
query.body <- rbind(query.body, regmatches(user.query$body[i], regexpr("(nsubject:).*(\\n)?", user.query$body[i]), invert = F))
query.body <- gsub("(\\\\n)", " ", query.body)
query.body <- gsub("(\\Re:)", " ", query.body)
query.body <- gsub("(nsubject:)", " ", query.body)
assign('query.body',query.body,envir=.GlobalEnv)
}}
query.body = NULL
clean.up <- function(x, DF){
for (i in 1:nrow(user.query)) {
query.body <- rbind(query.body, regmatches(user.query$body[i], regexpr("(nsubject:).*(\\n)?", user.query$body[i]), invert = F))
query.body <- gsub("(\\\\n)", " ", query.body)
query.body <- gsub("(\\Re:)", " ", query.body)
query.body <- gsub("(nsubject:)", " ", query.body)
assign('query.body',query.body,envir=.GlobalEnv)
}}
keyword <- readline(prompt = "Enter a keyword:   ")
user.query <- filter(DF, grepl(keyword, DF$body))
keyword <- readline(prompt = "Enter a keyword:   ")
user.query <- filter(DF, grepl(keyword, DF$body))
clean.up(user.query)
corpus <- Corpus(DataframeSource(query.body = NULL))
corpus <- Corpus(DataframeSource(query.body))
clean.corpus <- finction(x, corpus){
corpus <- tm_map(corpus.tm, stemDocument)
clean.corpus <- finction(x, corpus){
clean.corpus <- function(x, corpus){
corpus <- tm_map(corpus, stemDocument)
corpus <- tm_map(corpus, removeWords, c(stopwords("english"), stopwords("SMART")))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, stripWhitespace)
assign('corpus',corpus,envir=.GlobalEnv)
}
clean.corpus(corpus)
clean.corpus <- function(corpus){
corpus <- tm_map(corpus, stemDocument)
corpus <- tm_map(corpus, removeWords, c(stopwords("english"), stopwords("SMART")))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, stripWhitespace)
assign('corpus',corpus,envir=.GlobalEnv)
}
clean.corpus(corpus)
coprus.df <-data.frame(text=unlist(sapply(corpus, `[`, "content")), stringsAsFactors=F)
View(coprus.df)
print(corpus.df[1])
print(corpus.df)
inspect(corpus)
inspect(corpus.df)
coprus.df <-data.frame(text=unlist(sapply(corpus, `[`, "content")), stringsAsFactors=F)
inspect(corpus.df)
inspect(corpus.df)
TDM <- TermDocumentMatrix(corpus,
control = list(removePunctuation = TRUE,
stopwords = TRUE))
inspect(TDM[300:350,1:10])
inspect(TDM[1:350,1:10])
findAssocs(TDM, "peace", 0.5)
parsing.date <- function(DF) {
arrive <- ymd_hms(x$date, tz = "Pacific/Auckland")
time <- hour(arrive)
#time <-time[complete.cases(time)]
date <- as.Date(as.POSIXct(strptime(x$date, "%Y-%m-%d %H:%M:%S")))
#date <-date[complete.cases(date)]
stripped_date = data.frame(date, time, x$body)
DF <- stripped_date[order(date),]
assign('DF',DF,envir=.GlobalEnv)
}
parsing.date(DF)
parsing.date <- function(DF) {
arrive <- ymd_hms(DF$date, tz = "Pacific/Auckland")
time <- hour(arrive)
#time <-time[complete.cases(time)]
date <- as.Date(as.POSIXct(strptime(DF$date, "%Y-%m-%d %H:%M:%S")))
#date <-date[complete.cases(date)]
stripped_date = data.frame(date, time, DF$body)
DF <- stripped_date[order(date),]
assign('DF',DF,envir=.GlobalEnv)
}
parsing.date(DF)
View(DF)
parsing.date <- function(DF) {
arrive <- ymd_hms(DF$date, tz = "Pacific/Auckland")
time <- hour(arrive)
#time <-time[complete.cases(time)]
date <- as.Date(as.POSIXct(strptime(DF$date, "%Y-%m-%d %H:%M:%S")))
#date <-date[complete.cases(date)]
stripped_date = data.frame(date, time, DF$body)
DF <- stripped_date[order(date),]
colnames(DF)[3] <- "body"
assign('DF',DF,envir=.GlobalEnv)
}
parsing.date(DF)
parsing.date <- function(DF) {
arrive <- ymd_hms(DF$date, tz = "Pacific/Auckland")
time <- hour(arrive)
#time <-time[complete.cases(time)]
date <- as.Date(as.POSIXct(strptime(DF$date, "%Y-%m-%d %H:%M:%S")))
#date <-date[complete.cases(date)]
stripped_date = data.frame(date, time, DF$body)
DF <- stripped_date[order(date),]
assign('DF',DF,envir=.GlobalEnv)
}
parsing.date(DF)
colnames(DF)[3] <- "body"
View(DF)
user.query <- filter(DF, grepl(keyword, DF$body))
View(user.query)
clean.up(user.query)
View(user.query)
corpus <- Corpus(DataframeSource(query.body))
clean.corpus(corpus)
inspect(corpus)
View(user.query)
coprus.df <-data.frame(text=unlist(sapply(corpus, `[`, "content")), stringsAsFactors=F)
View(coprus.df)
