by = "vars")
View(DataFrame)
deg.status = [grep("Yes", dd$waitlist), ]
deg.status = grep("Yes", DataFrame$waitlist),
deg.status = grep("Yes", DataFrame$waitlist)
deg.status = DataFrame[grep("Yes", DataFrame$waitlist), ]
View(deg.status)
waitlisted = DataFrame[grep("Yes", DataFrame$waitlist), ]
waitlisted.degree = waitlisted[,.SD,.SDcols=c(1,3)]
View(waitlisted.degree)
View(waitlisted)
waitlisted.degree = waitlisted[,.SD,.SDcols=c(1,2)]
View(waitlisted.degree)
waitlisted.degree = count(waitlisted[,.SD,.SDcols=c(1,2)])
View(waitlisted.degree)
waitlisted.degree = count(select[waitlisted, 1:2)
waitlisted.degree = count(select(waitlisted, 1:2)
waitlisted.degree = count(select(waitlisted, 1:2))
View(waitlisted.degree)
waitlisted = DataFrame[grep("Yes", DataFrame$waitlist), ]
waitlisted.degree = count(select(waitlisted, 1:2))
View(waitlisted)
waitlisted.degree = select(waitlisted, 1:2)
View(waitlisted.degree)
waitlisted.degree = count(select(waitlisted, 1:2))
count(waitlisted.degree)
count(waitlisted.degree, vars = degree)
waitlisted.degree = select(waitlisted, 1:2)
count(waitlisted.degree, vars = degree)
waitlisted.degree = count(waitlisted.degree, vars = degree)
View(waitlisted.degree)
deg.status = deg.status[ , N := sum(n.x, n.y, na.rm=TRUE), by=1:NROW(deg.status)]
waitlistGraph <- ggplot(DataFrame, aes(factor(DataFrame$waitlist), fill = factor(DataFrame$waitlist))) + geom_bar(width=.5) +
labs(title = "Enrollement Status", x = "Waitlist", y = "Number of students")
multiplot(waitlistGraph, degreeGraph, cols=2)
View(waitlisted.degree)
degree.t <- DataFrame[,.N,by= degree]
View(degree.t)
View(degree.t)
View(waitlisted.degree)
waitlisted.degree = count(waitlisted.degree, degree = degree)
waitlisted.degree = count(waitlisted.degree, vars = degree)
colnames(waitlisted.degree) <- c("degree","N")
View(waitlisted.degree)
left_join(degree.t, waitlisted.degree, by = "degree")
View(DataFrame)
View(deg.status)
DataFrame$degree = gsub("\\(master\\)", "", DataFrame$degree)
DataFrame$degree[which(DataFrame$degree== "MSDS")]<-"IDSE"
DataFrame$degree[which(DataFrame$degree== "Ms in ds")]<-"IDSE"
DataFrame$degree[which(DataFrame$degree== "Data Science")]<-"IDSE"
#Tools: spliting tools to seperate columns
tools <- strsplit(as.character(DataFrame$tools),',')
setDT(DataFrame)[, paste0("tools", 1:16) := tstrsplit(tools, ",")]   #Add seperate column for each program
degree.t <- DataFrame[,.N,by= degree]
waitlisted = DataFrame[grep("Yes", DataFrame$waitlist), ]
waitlisted.degree = select(waitlisted, 1:2)
waitlisted.degree = count(waitlisted.degree, vars = degree)
colnames(waitlisted.degree) <- c("degree","N")
left_join(degree.t, waitlisted.degree, by = "degree")
degree.t <- left_join(degree.t, waitlisted.degree, by = "degree")
View(degree.t)
degree.t[is.na(deg.status)] <- 0
degree.t[is.na(degree.t)] <- 0
View(degree.t)
View(degree.t)
View(waitlisted.degree)
View(degree.t)
waitlisted = DataFrame[grep("Yes", DataFrame$waitlist), ]
waitlisted.degree = select(waitlisted, 1:2)
waitlisted.degree = count(waitlisted.degree, vars = degree)
View(waitlisted.degree)
degree.t <- DataFrame[,.N,by= degree]
View(degree.t)
degree.t <- DataFrame[,.N,by= degree]
View(degree.t)
degree.t$QMSS
degree.t[QMSS]
degree.t(QMSS)
degreeFactors <- DataFrame[,.N,by= degree]
degreeFactors$N[1] <- degreeFactors$N[1] + degreeFactors$N[6] + degreeFactors$N[8] + degreeFactors$N[12]
degreeFactors <- degreeFactors[-c(6, 8, 12), ]
degreeFactors <- degreeFactors[order(-N),]
degreeFactors <- data.frame(degreeFactors)
View(degreeFactors)
CSV_url <- getURL("https://raw.githubusercontent.com/Amirosimani/ExploratoryDataAnalysis/master/Survey.csv")
DataFrame <- read.csv(text = CSV_url)
## Tidying the data frame
DataFrame <- Filter(function(x)!all(is.na(x)), DataFrame) #Delete empty columns
colnames(DataFrame) <- c("waitlist","degree","tools",
"R_DataManipulation", "pronoun","editor","R_Graphics",
"R_MultiVariate","Markdown","Matlab_DataManipulation","GitHub") #Rename columns name
# cleaning up text
DataFrame$tools = gsub("\\(formerly docs\\)", "", DataFrame$tools)
DataFrame$tools =  gsub("\\(grep\\)", "", gsub("\\(terminal \\/ command line\\)","", DataFrame$tools))
#Degree: removing non-unique values, combingin similar ones, etc
DataFrame$degree = gsub("\\(master\\)", "", DataFrame$degree)
DataFrame$degree[which(DataFrame$degree== "MSDS")]<-"IDSE"
DataFrame$degree[which(DataFrame$degree== "Ms in ds")]<-"IDSE"
DataFrame$degree[which(DataFrame$degree== "Data Science")]<-"IDSE"
View(DataFrame)
count(DataFrame, vars = degree)
DataFrame$degree[which(DataFrame$degree== "MSDS")]<-"IDSE "
DataFrame$degree[which(DataFrame$degree== "Ms in ds")]<-"IDSE "
DataFrame$degree[which(DataFrame$degree== "Data Science")]<-"IDSE "
count(DataFrame, vars = degree)
DataFrame$degree[which(DataFrame$degree== "MSDS")]<-"IDSE"
DataFrame$degree[which(DataFrame$degree== "Ms in ds")]<-"IDSE"
DataFrame$degree[which(DataFrame$degree== "Data Science")]<-"IDSE"
count(DataFrame, vars = degree)
waitlisted = DataFrame[grep("Yes", DataFrame$waitlist), ]
waitlisted.degree = select(waitlisted, 1:2)
waitlisted.degree = count(waitlisted.degree, vars = degree)
colnames(waitlisted.degree) <- c("degree","N")
degree.t <- DataFrame[,.N,by= degree]
View(waitlisted.degree)
total.degree <- count(DataFrame, vars = degree)
View(total.degree)
View(total.degree)
total.degree[-c(3, 9), ]
left_join(total.degree, waitlisted.degree)
left_join(total.degree, waitlisted.degree, by = degree)
waitlisted = DataFrame[grep("Yes", DataFrame$waitlist), ]
waitlisted.degree = select(waitlisted, 1:2)
waitlisted.degree = count(waitlisted.degree, vars = degree)
total.degree <- count(DataFrame, vars = degree)
total.degree[-c(3, 9), ]
left_join(total.degree, waitlisted.degree, by = vars)
library(RCurl)
library(data.table)
library(ggplot2)
library(grid)
library(dplyr)
# Read  file from GitHub repo
CSV_url <- getURL("https://raw.githubusercontent.com/Amirosimani/ExploratoryDataAnalysis/master/Survey.csv")
DataFrame <- read.csv(text = CSV_url)
## Tidying the data frame
DataFrame <- Filter(function(x)!all(is.na(x)), DataFrame) #Delete empty columns
colnames(DataFrame) <- c("waitlist","degree","tools",
"R_DataManipulation", "pronoun","editor","R_Graphics",
"R_MultiVariate","Markdown","Matlab_DataManipulation","GitHub") #Rename columns name
# cleaning up text
DataFrame$tools = gsub("\\(formerly docs\\)", "", DataFrame$tools)
DataFrame$tools =  gsub("\\(grep\\)", "", gsub("\\(terminal \\/ command line\\)","", DataFrame$tools))
#Degree: removing non-unique values, combingin similar ones, etc
DataFrame$degree = gsub("\\(master\\)", "", DataFrame$degree)
DataFrame$degree[which(DataFrame$degree== "MSDS")]<-"IDSE"
DataFrame$degree[which(DataFrame$degree== "Data Science")]<-"IDSE"
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
# Multiple plot function
DataFrame$degree[which(DataFrame$degree== "Ms in ds")]<-"IDSE"
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
#to do: data label on bars
#waitlist graph
waitlistGraph <- ggplot(DataFrame, aes(factor(DataFrame$waitlist), fill = factor(DataFrame$waitlist))) + geom_bar(width=.5) +
labs(title = "Enrollement Status", x = "Waitlist", y = "Number of students")
#degrees graph
#R Data manipulation graph
dataManiGraph <- ggplot(DataFrame, aes(factor(DataFrame$R_DataManipulation), fill = degree)) + geom_bar(width=.5) +
labs(title = "Data Manipulation with R", x = "Confidence Level", y = "Number of students")
#R Graphics
RGraphicsGraph <- ggplot(DataFrame, aes(factor(DataFrame$R_Graphics), fill = degree)) + geom_bar(width=.5) +
labs(title = "Basic Graphics with R", x = "Confidence Level", y = "Number of students")
#R Advanced amd  visualization
RAdvancedGraph <- ggplot(DataFrame, aes(factor(DataFrame$R_MultiVariate),fill = degree)) + geom_bar(width=.5) +
labs(title = "Advanced Analysis and Visualization with R", x = "Confidence Level", y = "Number of students")
#R Markdown
RMDGraph <- ggplot(DataFrame, aes(factor(DataFrame$Markdown), fill = degree)) + geom_bar(width=.5) +
labs(title ="R Markdown", x = "Confidence Level", y = "Number of students")
#Matlab Data Manipulation
MatlabGraph <- ggplot(DataFrame, aes(factor(DataFrame$Matlab_DataManipulation), fill = degree)) + geom_bar(width=.5) +
labs(title = "Data Manipulation wiht Matlab", x = "Confidence Level", y = "Number of students")
#GitHub
GitHubGraph <- ggplot(DataFrame, aes(factor(DataFrame$GitHub), fill = degree)) + geom_bar(width=.5) +
labs(title = "GitHub", x = "Confidence Level", y = "Number of students")
toolsDF = setDT(select(DataFrame, degree, tools))[,]
tools <- strsplit(as.character(toolsDF$tools),',')
a1 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("R", tools)), length))
toolsDF[, R:= a1]
a2 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("Excel", tools)), length))
toolsDF[, Excel:= a2]
a3 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("SQL", tools)), length))
toolsDF[, SQL:= a3]
a4 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("ggplot2", tools)), length))
toolsDF[, ggplot2:= a4]
a5 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("Python", tools)), length))
toolsDF[, Python:= a5]
a6 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("Stata", tools)), length))
toolsDF[, Stata:= a6]
a7 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("dropbox", tools)), length))
toolsDF[, dropbox:= a7]
a8 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("google drive", tools)), length))
toolsDF[, googledirve:= a8]
a9 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("LaTeX", tools)), length))
toolsDF[, LaTeX:= a9]
a10 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("regular expressions", tools)), length))
toolsDF[, RegEx:= a10]
a11 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("Sweave/knitr", tools)), length))
toolsDF[, Sweave.knitr:= a11]
a12 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("XML", tools)), length))
toolsDF[, xml:= a12]
a13 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("Web: html css js", tools)), length))
toolsDF[, web:= a13]
a14 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("shell", tools)), length))
toolsDF[, shell:= a14]
a15 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("Github", tools)), length))
toolsDF[, Github:= a15]
a16 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("C\\/C\\+\\+", tools)), length))
toolsDF[, C:= a16]
a17 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("Matlab", tools)), length))
toolsDF[, Matlab:= a17]
a18 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("SPSS", tools)), length))
toolsDF[, SPSS:= a18]
a19 <- as.numeric(sapply(regmatches(toolsDF$tools, gregexpr("RStudio", tools)), length))
toolsDF[, RStudio:= a19]
toolsDF$R <- toolsDF$R - toolsDF$RStudio
setkey(toolsDF)
toolsDF$degree <- as.factor(toolsDF$degree)
toolsDF[,tools:=NULL]
toolsDF.degree = toolsDF[, lapply(.SD, sum), by = degree]
toolsDF.degree.m <- melt(toolsDF.degree)
ggplot(toolsDF.degree.m, aes(degree, variable)) + geom_tile(aes(fill = value , colour = "white"))
View(toolsDF.degree.m)
View(toolsDF.degree)
toolsDF.degree[ , lapply(.SD , mean ) , by = degree ]
d <- toolsDF.degree[ , lapply(.SD , mean ) , by = degree ]
View(d)
View(DataFrame)
View(DataFrame)
CSV_url <- getURL("https://raw.githubusercontent.com/Amirosimani/ExploratoryDataAnalysis/master/Survey.csv")
DataFrame <- read.csv(text = CSV_url)
View(DataFrame)
install.packages("netcdf")
install.packages("ncdf4")
?ncdf4
help(ncdf4)
?ncdf4
??ncdf4
network <- read.table("http://moreno.ss.uci.edu/krackht.dat", header=TRUE)
read.table("http://moreno.ss.uci.edu/krackht.dat", header=TRUE)
network <- read.table("http://moreno.ss.uci.edu/krackht.dat", header=TRUE, sep=",")
View(network)
network <- read.table("http://moreno.ss.uci.edu/krackht.dat", header=TRUE, sep=" ")
network <- read.table("http://moreno.ss.uci.edu/krackht.dat", header=TRUE, sep="")
network <- read.table("http://moreno.ss.uci.edu/krackht.dat", header=TRUE, sep=",")
View(network)
network <- read.delim("http://moreno.ss.uci.edu/krackht.dat", header=TRUE, sep="")
network <- read.delim("http://moreno.ss.uci.edu/krackht.dat", header=TRUE, sep=",")
View(network)
network <- read.delim("http://moreno.ss.uci.edu/krackht.dat", header=TRUE, sep=",", skip= 7)
View(network)
network <- read.delim("http://moreno.ss.uci.edu/krackht.dat", header=TRUE, sep=",", skip= 6)
View(network)
network <- read.delim("http://moreno.ss.uci.edu/krackht.dat", header=TRUE, sep=",", skip= 7)
View(network)
network <- read.csv("http://moreno.ss.uci.edu/krackht.dat", header=TRUE, sep=",", skip= 7)
View(network)
network <- read.csv("http://moreno.ss.uci.edu/krackht.dat", header=TRUE, sep="",  na.strings ="", skip= 7)
network <- read.csv("http://moreno.ss.uci.edu/krackht.dat", header=TRUE, sep=",", skip= 7)
View(network)
library(data.table)
View(network)
clmns <- strsplit(as.character(network[1]),' ')
clmns <- strsplit(as.character(network[1]),"")
setDT(network1[, paste0("clmns", 1:16) := tstrsplit(clmns, ",")]
)
setDT(network[, paste0("clmns", 1:16) := tstrsplit(clmns, ",")])
View(network)
clmns <- strsplit(as.numeric(network[1]),"")
clmns <- strsplit(as.numeric(network[1]),'')
attributes <- read.csv("http://moreno.ss.uci.edu/krackht_att.dat", header=TRUE, sep=",", skip= 7)
View(attributes)
attributes <- read.csv("http://moreno.ss.uci.edu/krackht_att.dat", header=TRUE, sep=",", skip= 8)
View(attributes)
library(ggplot2)
ggplot() + geom_histogram(aes(x=x))
my.data <- rnomr(1000)
my.data <- rnorm(1000)
ggplot() + geom_histogram(aes(x=my.data), binwitdh = 0.1)
ggplot() + geom_histogram(aes(x=my.data), binwidth = 0.1)
ggplot() + geom_histogram(aes(x=my.data), bin = 1)
ggplot() + geom_histogram(aes(x=my.data), bin = 2)
ggplot() + geom_histogram(aes(x=my.data), bin = 20)
ggplot() + geom_histogram(aes(x=my.data), bins = 20)
ggplot() + geom_histogram(aes(x=my.data), bins = 2)
ggplot() + geom_histogram(aes(x=my.data), bins = 1)
ggplot() + geom_histogram(aes(x=my.data), bins = 100)
ggplot() + geom_histogram(aes(x=my.data), bins = 50)
ggplot() + geom_histogram(aes(x=my.data), bins = 50, fill = "blue")
ggplot() + geom_histogram(aes(x=my.data), bins = 50, fill = "blue", alpha = 0.3)
ggplot() + geom_histogram(aes(x=my.data), bins = 50, fill = "blue", alpha = 0.8)
ggplot() + geom_density(aes = my.data)
ggplot() + geom_density(aes(x = my.data))
ggplot() + geom_density(aes(x = my.data), fill = "green", color ="blue")
p<- ggplot() + geom_density(aes(x = my.data), fill = "green", color ="blue") + ggtitle("My plot")
p
p<- ggplot() + geom_density(aes(x = my.data), fill = "yellow", color ="blue") + ggtitle("My plot")
p
p<- ggplot() + geom_density(aes(x = my.data), fill = "yellow", color ="blue", alpha = 0.7) + ggtitle("My plot")
p
p + coord_cartesian(xlim = c(0,1))
p
p + coord_cartesian(xlim = c(0,2))
p + coord_cartesian(xlim = c(2,3))
p + coord_cartesian(xlim = c(2,3)) + xlab("data") + ylab("density")
p  + xlab("data") + ylab("density")
p  + xlab("data") + ylab("density") + ggtitle("my plot")
a<- ggplot() + geom_histogram(aes(x=my.data), bins = 50, fill = "blue", alpha = 0.8)
a
a + geom_histogram(color = "yellow")
x <- seq(from = 1, to = 10, by = 0.1)
y <- x*3 + x^2 + sin(x) + rnorm(length(x), sd =3)
x <- seq(from = -3, to = 3, by = 0.1)
y <- x*3 + x^2 + sin(x) + rnorm(length(x), sd =3)
ggplot() + geom_point(aes(x =x, y=y))
b <- ggplot() + geom_point(aes(x =x, y=y))
b + geom_smooth(aes(x=x, y=y))
b + geom_smooth(aes(x=x, y=y), method = lm)
b + geom_smooth(aes(x=x, y=y), method = lm) + geom_smooth(aes(x=x, y=y), method = loess)
b + geom_smooth(aes(x=x, y=y), method = lm) + geom_smooth(aes(x=x, y=y), method = loess, color = "red")
sleep <- rnorm(100, ,mean = 6, sd =1)
sleep <- rnorm(100, ,mean = 6, sd =1)
sleep <- rnorm(100, mean = 6, sd =1)
grade <- sleep + sleep^2 + rnrom(length(sleep), sd = 3)
grade <- sleep + sleep^2 + rnorm(length(sleep), sd = 3)
dataframe <- df(sleep, grade)
df <- dataframe(sleep, grade)
df <- data.frame(sleep, grade)
ggplot(data =df, aes(x = sleep, y =drade)) + geom_point()
ggplot(data =df, aes(x = sleep, y =grade)) + geom_point()
ggplot(data =df, aes(x = sleep, y =grade)) + geom_point() + geom_smooth
ggplot(data =df, aes(x = sleep, y =grade)) + geom_point() + geom_smooth()
rep.int(c(1,0), c(50,50))
class <- rep.int(c(1,0), c(50,50))
x<- runif(100, mi=10, max =20)
y<- 5*x +40 + rnorm(100) + class *-2*x
df2 <- data.frame(input =x, output = y, condition = class)
df2
ggplot(df2, aes(x = input, y = output))
ggplot(df2, aes(x = input, y = output)) + geom_point()
ggplot(df2, aes(x = input, y = output)) + geom_point() + facet_grid(.~condition)
ggplot(df2, aes(x = input, y = output)) + geom_point() + facet_grid(.~condition) + geom_smooth()
grade <- sleep + sleep^2 + rnorm(length(sleep), sd = 10)
df <- data.frame(sleep, grade)
ggplot(data =df, aes(x = sleep, y =grade)) + geom_point() + geom_smooth()
class <- rep.int(c(1,0), c(50,50))
x<- runif(100, mi=10, max =20)
y<- 5*x +40 + rnorm(100) + class *-2*x
df2 <- data.frame(input =x, output = y, condition = class)
ggplot(df2, aes(x = input, y = output)) + geom_point() + facet_grid(.~condition) + geom_smooth()
x<- runif(100, mi=10, max =20)
y<- 5*x +40 + rnorm(100) + class *-2*x +rnorm(100, sd = 10)
df2 <- data.frame(input =x, output = y, condition = class)
ggplot(df2, aes(x = input, y = output)) + geom_point() + facet_grid(.~condition) + geom_smooth()
ggplot(df2, aes(x = input, y = output)) + geom_point() +  geom_smooth()
facet_grid(.~condition) + ggplot(df2, aes(x = input, y = output)) + geom_point() +  geom_smooth()
ggplot(df2, aes(x = input, y = output)) + geom_point() +  geom_smooth() + facet_grid(.~condition)
ggplot(df2, aes(x = input, y = output)) + geom_point() +  geom_smooth() + facet_grid(.~condition) + theme_minimal
ggplot(df2, aes(x = input, y = output)) + geom_point() +  geom_smooth() + facet_grid(.~condition) + theme_minimal()
### 0. libraries----
library(data.table)
library(plyr)
library(circlize)
library(ggplot2)
library(reshape2)
library(gridExtra)
library(cluster)
library(tm)
library(SnowballC)
library(RColorBrewer)
library(wordcloud)
Dem = fread(file.choose() ,header=TRUE)
Dia = fread(file.choose() ,header=TRUE)
Dem$race[Dem$race == 'Hispanic-HISPANIC'] = 'Hispanic'
Dem$race[Dem$race == 'White-WHITE'] = 'White'
Dem$race[Dem$race == 'American Indian-AMERICAN INDIAN'] = 'American Indian'
Dem$race[Dem$race == 'Asian-ASIAN'] = 'Asian'
Dem$race[Dem$race == 'BLACK OR AFRICAN AMERICAN'] = 'African American'
Dem$race[Dem$race == 'Black-BLACK'] = 'Black'
#Data conversion
Dem$date_of_birth = as.Date(Dem$date_of_birth)
Dem$date_of_death = as.Date(Dem$date_of_death)
Dia$dia_date = as.Date(Dia$dia_date)
### 3. Basic stats and plots----
options(digits=3)
race_gender <- dcast( Dem , race ~ gender , length )
race_gender$total <- race_gender$female + race_gender$male
race_gender <- race_gender[order(-race_gender$total),]
race_gender$age_average <- c(69.6,70.8,60.6,72.2,72.4,65.2)
race_gender$age_sd <- c(22.3,20.1,21.0,20.5,21.4,22.5)
row.names(race_gender) <- NULL
new_row <- c("All races",200,200,400,69.4,21.8)
race_gender <- rbind(new_row, race_gender)
#race and gender table
grid.table(race_gender, rows=NULL)
"tableau for bubble chart"
positions <- c("White", "Black", "Asian", "African American", "Hispanic","American Indian")
ggplot(Dem, aes(race, fill=gender)) + scale_x_discrete(limits = positions) +
geom_bar() +
ggtitle("Breakdown of patients based on Race and Gender")
geom_text(aes(label = count, y = pos), size = 3) + geom_text()
ggplot(Dem, aes(race, age)) + geom_boxplot(fill = "grey80", colour = "#3366FF") +
ggtitle("Patients average Age based on Race")
ggplot(Dem, aes(race, age, fill = gender)) + geom_boxplot() +
ggtitle("Patients age based on race and gender")
ggplot() +
geom_freqpoly(data = Dem, aes(age), binwidth = 5, size = 1.5) +
geom_freqpoly(data = Dem, aes(age, fill = race, colour = race),binwidth = 5, size = 1) + xlim(20, 100) +
ggtitle("Age distribution based on Race") +
geom_vline(xintercept=37, size = 0.3, color ="grey") + geom_vline(xintercept=58, size = 0.3, color ="grey")
ggplot() +
geom_freqpoly(data = Dem, aes(age), binwidth = 5, size = 1.5) +
geom_freqpoly(data = Dem, aes(age, fill = gender, colour = gender), binwidth = 5, size = 1) +
xlim(20, 100) + scale_fill_brewer() +
ggtitle("Age distribution based on Gender") +
geom_vline(xintercept=37, size = 0.3, color ="grey") + geom_vline(xintercept=58, size = 0.3, color ="grey")
aggregate(age~gender, Dem, function(x) c(mean = mean(x), sd = sd(x)))
ggplot(Dem, aes(gender, age)) + geom_boxplot(fill = "grey80", colour = "#3366FF")+
ggtitle("Patients average age based on Gender")
jpg("1.jpg")
bmp("1.bmp")
ggplot() +
geom_freqpoly(data = Dem, aes(age), binwidth = 5, size = 1.5) +
geom_freqpoly(data = Dem, aes(age, fill = race, colour = race),binwidth = 5, size = 1) + xlim(20, 100) +
ggtitle("Age distribution based on Race") +
geom_vline(xintercept=37, size = 0.3, color ="grey") + geom_vline(xintercept=58, size = 0.3, color ="grey")
dev.off()
bmp("2.bmp")
ggplot() +
geom_freqpoly(data = Dem, aes(age), binwidth = 5, size = 1.5) +
geom_freqpoly(data = Dem, aes(age, fill = gender, colour = gender), binwidth = 5, size = 1) +
xlim(20, 100) + scale_fill_brewer() +
ggtitle("Age distribution based on Gender") +
geom_vline(xintercept=37, size = 0.3, color ="grey") + geom_vline(xintercept=58, size = 0.3, color ="grey")
dev.off()
white <- Dem[ which(Dem$race =='White')]
#visualizing age of patients only for whites
"both female and male patients have an increase after "
ggplot() +
geom_freqpoly(data = white, aes(age), binwidth = 5, size = 2) +
geom_freqpoly(data = white, aes(age, fill = gender, colour = gender),binwidth = 5, size = 1) +
xlim(20, 100) + scale_fill_brewer() +
ggtitle("White patients' age based on gender") +
geom_vline(xintercept=37, size = 0.3, color ="grey") + geom_vline(xintercept=47, size = 0.3, color ="grey")
bmp("3.bmp")
ggplot() +
geom_freqpoly(data = white, aes(age), binwidth = 5, size = 2) +
geom_freqpoly(data = white, aes(age, fill = gender, colour = gender),binwidth = 5, size = 1) +
xlim(20, 100) + scale_fill_brewer() +
ggtitle("White patients' age based on gender") +
geom_vline(xintercept=37, size = 0.3, color ="grey") + geom_vline(xintercept=47, size = 0.3, color ="grey")
dev.off()
bmp("3.bmp")
ggplot() +
geom_freqpoly(data = white, aes(age), binwidth = 5, size = 2) +
geom_freqpoly(data = white, aes(age, fill = gender, colour = gender),binwidth = 5, size = 1) +
xlim(20, 100) + scale_fill_brewer() +
ggtitle("White patients' age based on gender") +
geom_vline(xintercept=37, size = 1, color ="grey") + geom_vline(xintercept=47, size = 0.3, color ="grey")
dev.off()
bmp("3.bmp")
ggplot() +
geom_freqpoly(data = white, aes(age), binwidth = 5, size = 2) +
geom_freqpoly(data = white, aes(age, fill = gender, colour = gender),binwidth = 5, size = 1) +
xlim(20, 100) + scale_fill_brewer() +
ggtitle("White patients' age based on gender") +
geom_vline(xintercept=37, size = 1, color ="grey") + geom_vline(xintercept=47, size = 1, color ="grey")
dev.off()
setwd("~/GitHub/MWH")
people <- read.csv('/Users/Amiros/GitHub/MWH/people.csv', sep = ",")
people$X <- NULL
people$from <- as.character(people$from)
people$to <- as.character(people$to)
people$cc <- as.character(people$cc)
library(data.table)
from <- read.csv('/Users/Amiros/GitHub/MWH/from.csv', sep = ",")
top100 <- from[1:100,]
selected <- people[people$from %in% top100$rn,]
a <- setDT(tstrsplit(as.character(selected$to), ";", fixed=TRUE))[]
b <- setDT(tstrsplit(as.character(selected$cc), ";", fixed=TRUE))[]
mat_sel <- cbind(selected$from, a,b)
colnames(mat_sel)[1] <- "from"
View(mat_sel)
summary(from)
summary(people$from)
names(people$from)
